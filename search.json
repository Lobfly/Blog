[{"title":"Hello World","url":"/Blog/2021/12/01/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"前端大文件切片传输","url":"/Blog/2021/10/18/%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E4%BC%A0%E8%BE%93/","content":"前端大文件切片传输File对象\n通常情况下， File 对象是来自用户在一个 input元素上选择文件后返回的 FileList 对象,也可以是来自由拖放操作生成的 DataTransfer 对象，或者来自 HTMLCanvasElement 上的 mozGetAsFile() API。\n\nBlob对象的子类文件FIle对象是Blob对象的子类，继承了Blob对象的属性与方法\n获取File对象通过inout.files来获取input元素的FileList对象，而input.value是文件的路径\n属性\nFile.lastModified 返回当前 File 对象所引用文件最后修改时间\nFile.lastModifiedDate 返回当前 File 对象所引用文件最后修改时间的 Date 对象\nFile.name 返回当前 File 对象所引用文件的名字\nFile.size 返回文件的大小\nFile.webkitRelativePath 返回文件的路径\nFile.type 返回文件的类型\n\n方法\nFile 接口没有定义任何方法，但是它从 Blob 接口继承slice方法\n\nBlob.slice - Web API 接口参考 | MDN\n切片大文件传输的问题在一个请求中上传大量数据会导致整个过程时间消耗较久，传输失败后要重头传输，而且用户无法知道传输的进度，体验较差\n所以在对大文件进行传输操作时，可以将大文件进行切片，可以实现如下几个要求\n\n可以断点续传\n可以显示上传的进度，用户体验更好\n\nslice方法对文件切片//chunks数组储存切片文件let chunks = []//slice方法接收两个参数，开始切片和结束切片的比特数,插值即为每个切片的大小，这里为1kblet startByte = 0let endByte = 1024while(startByte&lt;file.size)&#123;    let filePiece = file.slice(startByte,endByte)    chunks.push(filePiece)    startByte = endByte    endByte = startByte + piece&#125;\n\n对chunks进行传输后续添加","tags":["js"]}]